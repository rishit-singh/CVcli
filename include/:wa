#ifndef COMMAND_H
#define COMMAND_H

#include <fstream>
#include <opencv2/imgcodecs.hpp>
#include <string_view>
#include <vector>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>

struct CVResult
{
    std::string_view ID;
    cv::Mat Image;

    bool IsValid()
    {
        return (this->ID.length() && !this->Image.empty());
    }

    bool Display()
    {
        if (!this->IsValid())
            return false;

        cv::imshow(this->ID.data(), this->Image);
        cv::waitKey(0);

        return true;
    }

    bool Flush(std::string_view fileName)
    {
       return cv::imwrite(fileName.data(), this->Image);
    }

    CVResult(std::string_view id = nullptr, cv::Mat image = cv::Mat()) : ID(id), Image(image)
    {
    }
};

typedef CVResult (*OperationCallBack)(cv::Mat, std::vector<int>);

class Command
{
protected:
        void Initialize();

public:
    std::string_view Keyword;
    std::vector<std::string_view> Parameters;


    Command(char** argv = nullptr);

    Command(std::string_view keyword, std::vector<std::string_view> parameters);
};


class Operation
{
protected:
        CVResult Result;
        OperationCallBack Callback;

        Command OperationCommand;
public:

        void SetCallBack(OperationCallBack callback)
        {
            this->Callback = callback;
        }

        CVResult GetResult()
        {
            return this->Result;
        }

        CVResult Execute()
        {
            return CVResult();// return this->Callback(, );
        }

        Operation() : Result(), OperationCommand()
        {
        }
};


#endif //
      //
